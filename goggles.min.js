activate_truth_goggles = function($) {
	// constants
	var MODE_TRANSPARENT = "transparent";
	var MODE_SAFE = "safe";
	var MODE_LOADING = "loading";
	
	// UI Methods
	toggle_sidepane = function() {
		if(sidepane.hasClass("open"))
			close_sidepane();
		else
			open_sidepane();
	}
	
	open_sidepane = function() {
		sidepane.addClass("open");
		sidepane.animate({"width":"220px"}, {"queue":false, "duration": 500} );
		sidepane_alert.animate({"width":"220px"}, {"queue":false, "duration": 500} );
	}
	
	close_sidepane = function() {
		sidepane.removeClass("open");
		sidepane.animate({"width":"15px"}, {"queue":false, "duration": 500} );
		sidepane_alert.animate({"width":"15px"}, {"queue":false, "duration": 500} );
	}
	
	// Mode Swap
	change_mode = function(new_mode) {
		$("body").removeClass("critical-transparent");
		$("body").removeClass("critical-safe");
		$("body").removeClass("critical-loading");
		
		switch(new_mode) {
			case MODE_TRANSPARENT:
				$("body").addClass("critical-transparent");
				var h = '<h1>Transparent Mode</h1>';
				h = h + '<p>Click on the <span class="critical-phrase">highlighted phrases</span> to consider them more carefully.</p>';
				h = h + '<div id="critical-mode-toggle">enable safe mode</div>';
				sidepane_content.html(h);
				sidepane_content.find("#critical-mode-toggle").click(function() {change_mode(MODE_SAFE);});
				break;
			
			case MODE_SAFE:
				$("body").addClass("critical-safe");
				var h = '<h1>Safe Mode</h1>';
				h = h + '<p>Click on the <span class="critical-phrase">red boxes</span> to view and judge the hidden content.</p>';
				h = h + '<div id="critical-mode-toggle">enable transparent mode</div>';
				sidepane_content.html(h);
				sidepane_content.find("#critical-mode-toggle").click(function() {change_mode(MODE_TRANSPARENT);});
				break;
			
			case MODE_LOADING:
				$("body").addClass("critical-loading");
				var h = '<h1>Scanning...</h1>';
				h = h + '<p>Truth Goggles is searching this page for fact checked claims.</p>';
				sidepane_content.html(h);
				break;
		}
	}
	
	// Viewing Interface
	open_modal = function(phrase_node) {
		$("body").addClass("critical-modal-enabled");
		
		var phrase_clone = phrase_node.clone();
		var active_claim = claims[$.data(phrase_node, "claim-id")];
		
		// Create the phrase that will appear above the modal
		//phrase_clone.hide();
		phrase_node.after(phrase_clone);
		phrase_clone.css("top", phrase_node.offset().top - $(window).scrollTop());
		phrase_clone.css("left", phrase_node.offset().left - $(window).scrollLeft());
		
		// Populate the info pane
		var h = '<h1>Are you sure this is accurate?</h1>';
		h = h + '<ul>';
		for (var x = 0, active_verdict; active_verdict = active_claim.verdicts[x]; x++) {
			h = h + '<li>';
			h = h + '<div class="verdict-toggle"></div>';
			h = h + '<div class="verdict-header">';
			h = h + '<span class="vetting-service">' + active_verdict.vetting_service.title + ' Says:</span>';
			h = h + '<span class="truth-rating">' + active_verdict.result_class.title + '</span>';
			h = h + '<span class="short-reason">' + active_verdict.short_reason + '</span>';
			h = h + '</div>';
			h = h + '<div class="verdict-content">';
			h = h + '<div class="long-reason">'
			
			var reason_ps = active_verdict.long_reason.split("\n");
			for(y in reason_ps) {
				if($.trim(reason_ps[y]) == "")
					continue;
				h = h + "<p>" + reason_ps[y] + "</p>";
			}
			
			h = h + '</div>';
			h = h + '</div>';
			h = h + '<div class="verdict-more"><a href="' + active_verdict.url + '" target="_blank">More &gt;&gt;</a></div>';
			h = h + '</li>';
		}
		h = h + '</ul>';
		infopane_content.html(h);
		
		// Show everything we just created
		$(phrase_clone).addClass("critical-active");
		sidepane.fadeOut(500);
		phrase_clone.animate({
			"margin-left": "-250px",
			left: $("body").width()/2 + "px",
			top: "55px",
			width: "500px",
			padding: "10px",
			"font-size": "18px"
		},{
			duration:500,
			complete: function() { phrase_clone.css("left","50%"); }
		});
		modalpane.fadeIn(500, function() {$(".critical-claim-" + $.data(phrase_node, "claim-id")).addClass("critical-viewed")});
		infopane.fadeIn(500);
		
		// Show the phrases behind the modal
	}
	
	close_modal = function() {
		$("body").removeClass("critical-modal-enabled");
		$(".critical-active").remove();
		modalpane.fadeOut(500);
		infopane.fadeOut(500);
		sidepane.fadeIn(500);
	}
	
	// Potential Claims
	open_matching_announcement = function() {
		
	}
	
	close_matching_announcement = function() {
		
	}
	
	// Set up the sidepane
		var sidepane = $("<div>");
		sidepane.attr("id","critical-sidepane");
		sidepane.addClass("critical-element");
	
		var sidepane_close = $("<div>");
		sidepane_close.attr("id","critical-sidepane-close");
		sidepane.append(sidepane_close);
		sidepane_close.click(function() { toggle_sidepane() });
		
		var sidepane_main = $("<div>");
		sidepane_main.attr("id","critical-sidepane-main");
		sidepane.append(sidepane_main);
		
		var sidepane_logo = $("<div>");
		sidepane_logo.attr("id","critical-sidepane-logo");
		sidepane_main.append(sidepane_logo);
		
		var sidepane_content = $("<div>");
		sidepane_content.attr("id","critical-sidepane-content");
		sidepane_main.append(sidepane_content);
		
		var sidepane_alert = $("<div>");
		sidepane_alert.attr("id","critical-alert");
		sidepane_alert.html("Help identify more claims");
		sidepane_alert.hide();
		$("body").append(sidepane_alert);
		
		sidepane.css("width", "0px");
		$("body").append(sidepane);
		$(function() {open_sidepane();});
		
	// Set up the submit-a-fact context item
		var contextpane = $("<div>");
		contextpane.attr("id","critical-contextpane");
		contextpane.addClass("critical-element");
		contextpane.hide();
		$("body").append(contextpane);
	
	// Modal Pane
		var modalpane = $("<div>");
		modalpane.attr("id","critical-modal");
		modalpane.addClass("critical-element");
		modalpane.hide();
		$("body").append(modalpane);
	
	// Info Pane
		var infopane = $("<div>");
		infopane.attr("id","critical-infopane");
		infopane.addClass("critical-element");
		infopane.hide();
		
		var infopane_logo = $("<div>");
		infopane_logo.attr("id","critical-infopane-logo");
		infopane.append(infopane_logo);
		
		var infopane_content = $("<div>");
		infopane_content.attr("id","critical-infopane-content");
		infopane.append(infopane_content);
		
		var infopane_close = $("<div>");
		infopane_close.attr("id","critical-infopane-close");
		infopane_close.html("Close");
		infopane_close.click(function() { close_modal(); });
		infopane.append(infopane_close);
		
		$("body").append(infopane);
		
	
	// Phrases
		change_mode(MODE_LOADING);
		var paragraphs = document.getElementsByTagName("body");
		for(var x = 0; x < paragraphs.length ; ++x) {
			var snippets_script = document.createElement('script');
			var claims_script = document.createElement('script');
			var text = paragraphs[x].textContent?paragraphs[x].textContent:paragraphs[x].innerText;
		
			// Collect snippets
			$.ajax({
				type: 'POST',
				url: goggles_domain + '/api/snippets/',
				crossDomain: true,
				data: {
					oid:x,
					context: text
				},
				dataType: 'json',
				success: function(responseData, textStatus, jqXHR) {
					goggles_get_snippets_callback(responseData);
				},
				error: function (responseData, textStatus, errorThrown) {
					console.log('snippet lookup failed.');
				}
			});
			
			// Collect claims
			$.ajax({
				type: 'POST',
				url: goggles_domain + '/api/claims/',
				crossDomain: true,
				data: {
					oid:x,
					context: text
				},
				dataType: 'json',
				success: function(responseData, textStatus, jqXHR) {
					goggles_get_claims_callback(responseData);
				},
				error: function (responseData, textStatus, errorThrown) {
					alert('claim lookup failed.');
				}
			});
		}
	
	
	// Data Methods
	var claims = {};
	
	window.goggles_get_claims_callback = function(data) {
		for(var x = 0; x < data.claims.length; ++x) {
			var claim = data.claims[x];
			var claimStart = claim.content_start;
			var claimEnd = claimStart + claim.content_length;
			var p = paragraphs[data.oid];
			var claimAmountHighlighted = 0;
			
			if(!(claim.id in claims))
				claims[claim.id] = claim;
			
			// Recursive method to minimize the number of spans inserted
			(function createSPAN(object, cursor) {
				if(object.childNodes.length == 0)
					return object instanceof Text?object.length:0; // Only Text objects count toward character count (otherwise this would include things like HTML comments)
				
				// Loop through each child to find the beginning and end
				var children = Array.prototype.slice.call(object.childNodes);
				var familyLength = 0;
				
				var startIndex = -1;
				var endIndex = -1;
				var startOffset = 0;
				var endOffset = 0;
				var endNodeLength = 0;
				
				for(var y = 0; y < children.length ; ++y) {
					var child = children[y];
					var childLength = createSPAN(child, cursor);
					var childStart = cursor;
					var childEnd = childStart + childLength;
					cursor += childLength;
					familyLength += childLength;
					
					if(claimEnd < childStart) continue; // We're past the end of the claim
					if(claimStart >= childEnd) continue; // We haven't hit the start of the claim
					
					if(claimEnd >= childStart) {
						endIndex = y;
						endOffset = Math.min(childLength,  claimEnd - childStart);
						endNodeLength = childLength;
					}
						
					if(startIndex == -1) {
						startOffset = Math.max(0,claimStart - childStart);
						startIndex = y;
					}
				}
				
				// Case 0: We already finished highlighting this claim
				if(claimAmountHighlighted >= claimEnd - claimStart)
					return familyLength;
				
				// Case 1: The claim doesn't appear at all in this family
				if(startIndex == -1) 
					return familyLength;
				
				// Case 2: This entire node is incuded in the claim
				if(startIndex == 0 && startOffset == 0 && (endIndex == -1 || (endIndex == children.length-1 && endOffset == endNodeLength)))
					return familyLength;
								
				// Case 3: At least one endpoint is in this family
				var range = document.createRange();
				
				// Set the start
				if(startOffset == 0)
					range.setStartBefore(children[startIndex])
				else if(children[startIndex].childNodes.length == 0)
					range.setStart(children[startIndex], startOffset);
				else if(startIndex + 1 < children.length)
					range.setStartBefore(children[startIndex + 1]);
				
				// Set the end
				if(endIndex == -1) // The claim end isn't in this family
					range.setEndAfter(children[children.length - 1]);
				else if(children[endIndex].childNodes.length == 0)
					range.setEnd(children[endIndex], endOffset);
				else if(endOffset = endNodeLength)
					range.setEndBefore(children[endIndex]);
				
				var s = document.createElement("span");
				range.surroundContents(s);
				s = $(s);
				//s.css("background","green");
				
				claimAmountHighlighted += s.text().length // This prevents a bug where ancestors of the claim container would create extra SPANs
				return familyLength;
			})(p,0);
		}
	}
	
	window.goggles_get_snippets_callback = function(data) {
		for(var x = 0; x < data.snippets.length; ++x) {
			var snippet = data.snippets[x];
			var snippetStart = snippet.content_start;
			var snippetEnd = snippetStart + snippet.content_length;
			var p = paragraphs[data.oid];
			var snippetAmountHighlighted = 0;
			
			if(!(snippet.claim.id in claims))
				claims[snippet.claim.id] = snippet.claim;
			
			// Recursive method to minimize the number of spans inserted
			(function createSPAN(object, cursor) {
				if(object.childNodes.length == 0)
					return object instanceof Text?object.length:0; // Only Text objects count toward character count (otherwise this would include things like HTML comments)
				
				// Loop through each child to find the beginning and end
				var children = Array.prototype.slice.call(object.childNodes);
				var familyLength = 0;
				
				var startIndex = -1;
				var endIndex = -1;
				var startOffset = 0;
				var endOffset = 0;
				var endNodeLength = 0;
				
				for(var y = 0; y < children.length ; ++y) {
					var child = children[y];
					var childLength = createSPAN(child, cursor);
					var childStart = cursor;
					var childEnd = childStart + childLength;
					cursor += childLength;
					familyLength += childLength;
					
					if(snippetEnd < childStart) continue; // We're past the end of the snippet
					if(snippetStart >= childEnd) continue; // We haven't hit the start of the snippet
					
					if(snippetEnd >= childStart) {
						endIndex = y;
						endOffset = Math.min(childLength,  snippetEnd - childStart);
						endNodeLength = childLength;
					}
						
					if(startIndex == -1) {
						startOffset = Math.max(0,snippetStart - childStart);
						startIndex = y;
					}
				}
				
				// Case 0: We already finished highlighting this snippet
				if(snippetAmountHighlighted >= snippetEnd - snippetStart)
					return familyLength;
				
				// Case 1: The snippet doesn't appear at all in this family
				if(startIndex == -1) 
					return familyLength;
				
				// Case 2: This entire node is incuded in the snippet
				if(startIndex == 0 && startOffset == 0 && (endIndex == -1 || (endIndex == children.length-1 && endOffset == endNodeLength)))
					return familyLength;
								
				// Case 3: At least one endpoint is in this family
				var range = document.createRange();
				
				// Set the start
				if(startOffset == 0)
					range.setStartBefore(children[startIndex])
				else if(children[startIndex].childNodes.length == 0)
					range.setStart(children[startIndex], startOffset);
				else if(startIndex + 1 < children.length)
					range.setStartBefore(children[startIndex + 1]);
				
				// Set the end
				if(endIndex == -1) // The snippet end isn't in this family
					range.setEndAfter(children[children.length - 1]);
				else if(children[endIndex].childNodes.length == 0)
					range.setEnd(children[endIndex], endOffset);
				else if(endOffset = endNodeLength)
					range.setEndBefore(children[endIndex]);
				
				var s = document.createElement("span");
				range.surroundContents(s);
				s = $(s);
				s.addClass("critical-phrase");
				s.addClass("critical-claim-" + snippet.claim.id);
				$.data(s,"claim-id", snippet.claim.id);
				s.click(function() {
					open_modal(s);
				});
				
				snippetAmountHighlighted += s.text().length // This prevents a bug where ancestors of the snippet container would create extra SPANs
				return familyLength;
			})(p,0);
			
			// else if (document.selection) {
			// 					// Internet Explorer
			// 					mainRange = document.selection.createRange();
			// 					tempRange = document.selection.createRange();
			// 					tempRange.collapse(true); 
			// 					var selectedElement = tempRange.parentElement();
			// 					var contentID = $(selectedElement).attr("id").slice(STCONST_PLAYER_TRANSCRIPTCONTENT_PREFIX.length);
			// 					var selectedContent = transcript.getContentByID(contentID);
			// 					var transcriptID = transcript.transcriptID;
			// 		
			// 					var quoteLinkURL = STgetQuoteLinkURL(transcriptID, selectedContent.timestamp);
			// 		
			// 					var container = document.createElement("div");
			// 					$(container).css("visibility","hidden");
			// 		
			// 					var frontText = "<a href='" + quoteLinkURL + "'>";
			// 					var backText = "</a>";
			// 					var h = frontText + mainRange.htmlText + backText;
			// 					$(container).html(h);
			// 					$(document.body).append(container);
			// 		
			// 					var newRange = document.body.createTextRange()
			// 					newRange.moveToElementText(container);
			// 					newRange.select();
			// 					window.setTimeout(function () {
			// 						mainRange.select();
			// 						$(container).remove();
			// 					}, 0)
			// 				}
		}
		change_mode(MODE_SAFE);
	}
};
