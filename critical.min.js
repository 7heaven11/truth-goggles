(function() {
	
	var CSS_URL = criticalDomain + "/styles/critical.min.css";
	
	// Step 0: Import the css
	s = document.createElement('link');
	s.rel = 'stylesheet';
	s.type = 'text/css';
	s.href = CSS_URL;
    s.media = 'all';
	document.getElementsByTagName("head")[0].appendChild(s);
	
	// Step 1: Collect the text
	var paragraphs = document.getElementsByTagName("body");
	for(var x = 0; x < paragraphs.length ; ++x) {
		var snippets_script = document.createElement('script');
		var claims_script = document.createElement('script');
		var text = paragraphs[x].textContent?paragraphs[x].textContent:paragraphs[x].innerText;
		
		snippets_script.src = criticalDomain + "/api/snippets/" + '?jsonp=1&oid=' + x + '&context=' + encodeURIComponent(text);
		document.getElementsByTagName('head')[0].appendChild(snippets_script);
		
		claims_script.src = criticalDomain + "/api/claims/" + '?jsonp=1&oid=' + x + '&context=' + encodeURIComponent(text);
		document.getElementsByTagName('head')[0].appendChild(claims_script);
	}
	
	window.goggles_get_claims_callback = function(data) {
		console.log(data);
	}
	
	window.goggles_get_snippets_callback = function(data) {
		for(var x = 0; x < data.snippets.length; ++x) {
			var snippet = data.snippets[x];
			var snippetStart = snippet.content_start;
			var snippetEnd = snippetStart + snippet.content_length;
			var p = paragraphs[data.oid];
			var snippetAmountHighlighted = 0;
			
			// Pick the verdict we want to use
			if(snippet.claim.verdicts.length > 0)
				var verdict = snippet.claim.verdicts[0];
			
			
			// Recursive method to minimize the number of spans inserted
			(function createSPAN(object, cursor) {
				if(object.childNodes.length == 0)
					return object instanceof Text?object.length:0; // Only Text objects count toward character count (otherwise this would include things like HTML comments)
				
				// Loop through each child to find the beginning and end
				var children = Array.prototype.slice.call(object.childNodes);
				var familyLength = 0;
				
				var startIndex = -1;
				var endIndex = -1;
				var startOffset = 0;
				var endOffset = 0;
				var endNodeLength = 0;
				
				for(var y = 0; y < children.length ; ++y) {
					var child = children[y];
					var childLength = createSPAN(child, cursor);
					var childStart = cursor;
					var childEnd = childStart + childLength;
					cursor += childLength;
					familyLength += childLength;
					
					if(snippetEnd < childStart) continue; // We're past the end of the snippet
					if(snippetStart >= childEnd) continue; // We haven't hit the start of the snippet
					
					if(snippetEnd >= childStart) {
						endIndex = y;
						endOffset = Math.min(childLength,  snippetEnd - childStart);
						endNodeLength = childLength;
					}
						
					if(startIndex == -1) {
						startOffset = Math.max(0,snippetStart - childStart);
						startIndex = y;
					}
				}
				
				// Case -1: We already finished highlighting this snippet
				if(snippetAmountHighlighted >= snippetEnd - snippetStart)
					return familyLength;
				
				// Case 0: The snippet doesn't appear at all in this family
				if(startIndex == -1) 
					return familyLength;
				
				// Case 1: This entire node is incuded in the snippet
				if(startIndex == 0 && startOffset == 0 && (endIndex == -1 || (endIndex == children.length-1 && endOffset == endNodeLength)))
					return familyLength;
								
				// Case 2: At least one endpoint is in this family
				var range = document.createRange();
				
				// Set the start
				if(startOffset == 0)
					range.setStartBefore(children[startIndex])
				else if(children[startIndex].childNodes.length == 0)
					range.setStart(children[startIndex], startOffset);
				else if(startIndex + 1 < children.length)
					range.setStartBefore(children[startIndex + 1]);
				
				// Set the end
				if(endIndex == -1) // The snippet end isn't in this family
					range.setEndAfter(children[children.length - 1]);
				else if(children[endIndex].childNodes.length == 0)
					range.setEnd(children[endIndex], endOffset);
				else if(endOffset = endNodeLength)
					range.setEndBefore(children[endIndex]);
				
				var s = document.createElement("span");
				s.className = "critical " + verdict.result_class.class;
				range.surroundContents(s);
				
				snippetAmountHighlighted += s.innerText.length // This prevents a bug where ancestors of the snippet container would create extra SPANs
				
				return familyLength;
			})(p,0);
			
			// else if (document.selection) {
			// 					// Internet Explorer
			// 					mainRange = document.selection.createRange();
			// 					tempRange = document.selection.createRange();
			// 					tempRange.collapse(true); 
			// 					var selectedElement = tempRange.parentElement();
			// 					var contentID = $(selectedElement).attr("id").slice(STCONST_PLAYER_TRANSCRIPTCONTENT_PREFIX.length);
			// 					var selectedContent = transcript.getContentByID(contentID);
			// 					var transcriptID = transcript.transcriptID;
			// 		
			// 					var quoteLinkURL = STgetQuoteLinkURL(transcriptID, selectedContent.timestamp);
			// 		
			// 					var container = document.createElement("div");
			// 					$(container).css("visibility","hidden");
			// 		
			// 					var frontText = "<a href='" + quoteLinkURL + "'>";
			// 					var backText = "</a>";
			// 					var h = frontText + mainRange.htmlText + backText;
			// 					$(container).html(h);
			// 					$(document.body).append(container);
			// 		
			// 					var newRange = document.body.createTextRange()
			// 					newRange.moveToElementText(container);
			// 					newRange.select();
			// 					window.setTimeout(function () {
			// 						mainRange.select();
			// 						$(container).remove();
			// 					}, 0)
			// 				}
		}
	}
})();
