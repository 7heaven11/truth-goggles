(function() {
	
	var API_URL = criticalDomain + "/api/factcheck.php";
	var CSS_URL = criticalDomain + "/styles/critical.min.css";
	
	// Step 0: Import the css
	s = document.createElement('link');
	s.rel = 'stylesheet';
	s.type = 'text/css';
	s.href = CSS_URL;
    s.media = 'all';
	document.getElementsByTagName("head")[0].appendChild(s);
	
	// Step 1: Collect the text
	var paragraphs = document.getElementsByTagName("p");
	for(var x = 0; x < paragraphs.length ; ++x) {
		var script = document.createElement('script');
		var text = paragraphs[x].textContent?paragraphs[x].textContent:paragraphs[x].innerText;
		script.src = API_URL + '?callback=CRITICAL_factchecked&pid=' + x + '&context=' + encodeURIComponent(text);
		document.getElementsByTagName('head')[0].appendChild(script);
	}
	
	window.CRITICAL_factchecked = function(data) {
		if(data.verdicts.length > 0) {
			for(var x = 0; x < data.verdicts.length; ++x) {
				var verdict = data.verdicts[x];
				var p = paragraphs[data.pid];
				
				// Recursive method to minimize the number of spans inserted
				var verdictStart = verdict.contentStart;
				var verdictEnd = verdict.contentStart + verdict.contentLength;
				
				(function createSPAN(object, cursor) {
					if(object.childNodes.length == 0)
						return object.length;
					
					// Loop through each child to find the beginning and end
					var children = Array.prototype.slice.call(object.childNodes);
					var familyLength = 0;
					
					var startIndex = -1;
					var endIndex = -1;
					var startOffset = 0;
					var endOffset = 0;
					var endNodeLength = 0;
					
					for(var y = 0; y < children.length ; ++y) {
						var child = children[y];
						var childLength = createSPAN(child, cursor);
						var childStart = cursor;
						var childEnd = childStart + childLength;
						cursor += childLength;
						familyLength += childLength;
						
						if(verdictEnd < childStart) continue; // We're past the end of the verdict
						if(verdictStart >= childEnd) continue; // We haven't hit the start of the verdict
						
						if(verdictEnd >= childStart) {
							endIndex = y;
							endOffset = Math.min(childLength,  verdictEnd - childStart);
							endNodeLength = childLength;
						}
							
						if(startIndex == -1) {
							startOffset = Math.max(0,verdictStart - childStart);
							startIndex = y;
						}
					}
					
					// Case 0: The verdict doesn't appear at all in this family
					if(startIndex == -1) 
						return familyLength;
					
					// Case 1: This entire node is incuded in the verdict
					if(startIndex == 0 && startOffset == 0 && (endIndex == -1 || (endIndex == children.length-1 && endOffset == endNodeLength)))
						return familyLength;
					
					// Case 2: At least one endpoint is in this family
					var range = document.createRange();
					
					// Set the start
					if(startOffset == 0)
						range.setStartBefore(children[startIndex])
					else if(children[startIndex].childNodes.length == 0)
						range.setStart(children[startIndex], startOffset);
					else if(startIndex + 1 < children.length)
						range.setStartBefore(children[startIndex + 1]);
					
					// Set the end
					if(endIndex == -1) // The verdict end isn't in this family
						range.setEndAfter(children[children.length - 1]);
					else if(children[endIndex].childNodes.length == 0)
						range.setEnd(children[endIndex], endOffset);
					else if(endOffset = endNodeLength)
						range.setEndBefore(children[endIndex]);
					
					var s = document.createElement("span");
					s.className = "critical " + verdict.verdictClass;
					range.surroundContents(s);
					
					return familyLength;
				})(p,0);
				
				// else if (document.selection) {
				// 					// Internet Explorer
				// 					mainRange = document.selection.createRange();
				// 					tempRange = document.selection.createRange();
				// 					tempRange.collapse(true); 
				// 					var selectedElement = tempRange.parentElement();
				// 					var contentID = $(selectedElement).attr("id").slice(STCONST_PLAYER_TRANSCRIPTCONTENT_PREFIX.length);
				// 					var selectedContent = transcript.getContentByID(contentID);
				// 					var transcriptID = transcript.transcriptID;
				// 		
				// 					var quoteLinkURL = STgetQuoteLinkURL(transcriptID, selectedContent.timestamp);
				// 		
				// 					var container = document.createElement("div");
				// 					$(container).css("visibility","hidden");
				// 		
				// 					var frontText = "<a href='" + quoteLinkURL + "'>";
				// 					var backText = "</a>";
				// 					var h = frontText + mainRange.htmlText + backText;
				// 					$(container).html(h);
				// 					$(document.body).append(container);
				// 		
				// 					var newRange = document.body.createTextRange()
				// 					newRange.moveToElementText(container);
				// 					newRange.select();
				// 					window.setTimeout(function () {
				// 						mainRange.select();
				// 						$(container).remove();
				// 					}, 0)
				// 				}
			}
		}
	}
})();
