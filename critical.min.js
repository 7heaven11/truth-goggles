(function() {
	var API_URL = "http://192.168.1.101/~slifty/critical/api/factcheck.php";
	var CSS_URL = "http://192.168.1.101/~slifty/critical/styles/critical.min.css";
	
	// Step 0: Import the css
	s = document.createElement('link');
	s.rel = 'stylesheet';
	s.type = 'text/css';
	s.href = CSS_URL;
    s.media = 'all';
	document.getElementsByTagName("head")[0].appendChild(s);
	
	// Step 1: Collect the text
	var paragraphs = document.getElementsByTagName("p");
	for(var x = 0; x < paragraphs.length ; ++x) {
		var script = document.createElement('script');
		var text = paragraphs[x].innerText?paragraphs[x].innerText:paragraphs[x].textContent;
		script.src = API_URL + '?callback=CRITICAL_factchecked&pid=' + x + '&context=' + encodeURIComponent(text);
		document.getElementsByTagName('head')[0].appendChild(script);
	}
	
	window.CRITICAL_factchecked = function(data) {
		if(data.verdicts.length > 0) {
			for(var x = 0; x < data.verdicts.length; ++x) {
				var verdict = data.verdicts[x];
				var range = document.createRange();
				var p = paragraphs[data.pid];
				var startNode = p;
				var endNode = p;
				var startOffset = 0;
				var endOffset = 0;
				if(range) {
					// Loop through the child nodes
					var children = Array.prototype.slice.call(p.childNodes);
					var cursor = 0;
					
					for(var y = 0; y < children.length ; ++y) {
						var child = children[y];
						// If child is a parent, fold in deeper object
						if(child.childNodes.length > 0) {
							children = children.slice(0,y).concat(Array.prototype.slice.call(child.childNodes)).concat(children.slice(y+1));
							--y;
							continue;
						}
						
						// Is the first content character in this child
						if((cursor <= verdict.contentStart) 
						&& (cursor + child.length >= verdict.contentStart)) {
							startNode = child;
							startOffset = verdict.contentStart - cursor;
						}
						
						// Is the last content character in this child
						if(cursor + child.length > verdict.contentStart + verdict.contentLength) {
							endNode = child;
							endOffset = verdict.contentStart + verdict.contentLength - cursor;
							break;
						}
						cursor += child.length
					}
					range.setStart(startNode, startOffset);
					range.setEnd(endNode, endOffset);
					var s = document.createElement("span");
					s.className = "critical " + verdict.verdictClass;
					range.surroundContents(s);
					// range.setStart(p, 1);
					// 					range.setEnd(p, 2);
					// 					range.surroundContents(document.createElement("span"));
				} else if (document.selection) {
					// Internet Explorer
					mainRange = document.selection.createRange();
					tempRange = document.selection.createRange();
					tempRange.collapse(true); 
					var selectedElement = tempRange.parentElement();
					var contentID = $(selectedElement).attr("id").slice(STCONST_PLAYER_TRANSCRIPTCONTENT_PREFIX.length);
					var selectedContent = transcript.getContentByID(contentID);
					var transcriptID = transcript.transcriptID;
		
					var quoteLinkURL = STgetQuoteLinkURL(transcriptID, selectedContent.timestamp);
		
					var container = document.createElement("div");
					$(container).css("visibility","hidden");
		
					var frontText = "<a href='" + quoteLinkURL + "'>";
					var backText = "</a>";
					var h = frontText + mainRange.htmlText + backText;
					$(container).html(h);
					$(document.body).append(container);
		
					var newRange = document.body.createTextRange()
					newRange.moveToElementText(container);
					newRange.select();
					window.setTimeout(function () {
						mainRange.select();
						$(container).remove();
					}, 0)
				}
			}
		}
	}
})();
